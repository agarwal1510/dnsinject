DNSINJECT

1. Complie:
make

2. Command to run:
sudo ./dnsinject -h hostnames

3. Design
I parse the input and run pcap as done in HW2, then in my handler I check if the packet is not ip or udp or the source port is not 53 then I return. After the checks I fetch the dns payload and from that I parse the queried hostname. Now, if the hostname file was passed as argument then I check if the same hostname exists in the file, if it does then I use the given ip or I use my local machines ip (which I fetch using the libnet library functions). Now I start creating the spoof response in which I copy the dnspayload and the the spoofed IP. Now using libnet library functions I create the packet to inject, for that I intialise lbnet, and create the following packet in order: dns packet, udp packet, ipv4 packet, and finally I write this packet which is then sent over the interface. 

4. OS version:
Ubuntu 17.10
Language- C


DNSDETECT

1. Compile and Run:
sudo python detect.py

2. Design
Parses the input and passes the arguments to sniff() to start capturing packets. Then in my handler function, I check if the packet is not IP or UDP I do not further process the packet, similarly also for the source port if that is not 53. Then I check the DNS answer type and create a list of answered IPs (if type is A). Then I store the dns-id and query(hostname) tuple in a list and ip list as a value in a map with key as my tuple. Then I check if the tuple already exits in the list and has different answer then I report the poisoning attack. 

3. False positives: I check if the last dns-reply had the same Answer as in same IP address then I don't count that.

4. OS Version
Ubuntu 17.10
Language- Python 2.7.14

5. Output:

20171208-23:31:22 DNS Poisoning Attempt
TXID 37906 Request facebook.com.
Answer 1: ['31.13.69.228']
Answer 2: ['172.24.26.194']

